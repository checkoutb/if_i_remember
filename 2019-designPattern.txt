

1   创建型模式
这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。    

    工厂模式（Factory Pattern）
    抽象工厂模式（Abstract Factory Pattern）
    单例模式（Singleton Pattern）
    建造者模式（Builder Pattern）
    原型模式（Prototype Pattern）

2   结构型模式
这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。    

    适配器模式（Adapter Pattern）
    桥接模式（Bridge Pattern）
    过滤器模式（Filter、Criteria Pattern）
    组合模式（Composite Pattern）
    装饰器模式（Decorator Pattern）
    外观模式（Facade Pattern）
    享元模式（Flyweight Pattern）
    代理模式（Proxy Pattern）

3   行为型模式
这些设计模式特别关注对象之间的通信。  

    责任链模式（Chain of Responsibility Pattern）
    命令模式（Command Pattern）
    解释器模式（Interpreter Pattern）
    迭代器模式（Iterator Pattern）
    中介者模式（Mediator Pattern）
    备忘录模式（Memento Pattern）
    观察者模式（Observer Pattern）
    状态模式（State Pattern）
    空对象模式（Null Object Pattern）
    策略模式（Strategy Pattern）
    模板模式（Template Pattern）
    访问者模式（Visitor Pattern）

4   J2EE 模式
这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。   

    MVC 模式（MVC Pattern）
    业务代表模式（Business Delegate Pattern）
    组合实体模式（Composite Entity Pattern）
    数据访问对象模式（Data Access Object Pattern）
    前端控制器模式（Front Controller Pattern）
    拦截过滤器模式（Intercepting Filter Pattern）
    服务定位器模式（Service Locator Pattern）
    传输对象模式（Transfer Object Pattern）





















public class A_FactoryPattern
{

//    何时使用：我们明确地计划不同条件下创建不同实例时。
    // 看了抽象工厂模式 下的笔记，觉得这里是简单工厂模式。简单工厂模式就是直接返回对象。工厂模式是返回生产专门对象的工厂。
    // 不过意思都差不多。就是 消费者 和 生产者 解耦 (能这样说？使用者/调用者 和 生产者？)。
    // 常用的工厂模式是静态工厂，利用static方法
    

	
	
	
	
	
	
	
	
	
	
	
	
public class B_AbstractFactoryPattern
{
    
    // 就是工厂的工厂模式？
    // 差不多吧
    // 原先的工厂模式 是利用 AnyFactory.getSth() 来获得 对象的。如果增加一个 Any的子类，那么势必就要要修改 getSth。
    // 抽象工厂模式是直接新建一个工厂，然后返回 新的Any的子类。
    // 工厂模式 是 n个使用者 对应 1个Any工厂，1个Any工厂对应 n个Any子类。 当增加Any子类时，需要修改Any工厂类。
    // 看runoob上的确是 工厂的工厂模式，n个使用者 对应 1个工厂工厂类，1个工厂工厂类对应 n个工厂，每个工厂生产各种类。
    // 应该是用在那些 无法直接修改 getSth的情况下时，把 工厂类 扩展成 抽象工厂 类吧。
    // 不，无法修改getSth时，肯定也无法让工厂类继承 抽象工厂类。
    
    // 或者 新增的 类并不是Any的子类，这样的话，原先的getSth 就不值得再扩展了。此时新建一个工厂类，来返回 非Any子类的对象。
    // 应该主要是上面这个原因。
    // 对，主要是Any这个类太大了，在之前工厂模式可以分为 交通工具(Car,Bike)，水果(Apple,Banana).交通工具一个工厂类，水果一个工厂类。
    // 然后 VehicleFactory 和 FruitFactory, 组合成一个 FactoryFactory。这意味着 Any的子类可以归类，就是中间可以加一层继承(Vehicle,Fruit)
    
    // 主要是为了 增加一些东西。FactoryFactory 会有2个方法，一个move，一个eat。
    // 好像抽象工厂模式 只是 工厂模式里多几个方法，这几个方法由不同的工厂类来实现。。。
    // ？没什么大用吧。。。
    
    // https://www.cnblogs.com/chenpi/p/5156801.html
    // 就是对一组具有相同主题的工厂进行封装（维基百科解释的很到位）；
    // 例如：生产一台PC机，使用工厂方法模式的话，一般会有cpu工厂，内存工厂，显卡工厂...但是使用抽象工厂模式的话，只有一个工厂就是PC工厂，但是一个PC工厂涵盖了cpu工厂，内存工厂，显卡工厂等要做的所有事；
    // 注意这里的“相同主题”的概念，表示的是同一个产品族，不能将cpu工厂，面粉工厂封装成一个工厂，因为他们不属于同一个产品族；
    // 另外，还有一个产品等级的概念，还是以生产PC机为例，所谓的产品等级指的是不同厂商生产的CPU，如Intel和AMD的CPU,他们是同一个产品等级，如果只涉及产品等级的话，是不需要应用抽象工厂模式，使用工厂方法模式即可；
    // 工厂方法模式解决的范畴是产品等级（AMD处理器，Intel处理器等）；抽象工厂模式解决的范畴是产品族等级（联想PC、惠普PC等）；
    
    
    // 因为工厂方法返回的类型是固定的。总不能返回Object吧。。所以无法用一个工厂方法来返回全部的 对象(之前只有Any类，现在增加一个顶级父类，那么之前的getSth就没有用了。)。
    // 所以对 每类 对象(通过父类进行划分)，都 各写一个 工厂类。。并且把这些工厂类 抽象出一个 抽象工厂类/接口 作为父类。
    
    
    public static void main(String[] args)
    {


	
	
	
	
	
	
	
	


public class C_SingletonPattern



// 一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。
// 如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。

// 1. 懒汉式
class LazySingleton
{
    private static LazySingleton instance = null;           // static
    
    private LazySingleton() {}
    
    public static LazySingleton getInstance()
    {
        if (instance == null)
            instance = new LazySingleton();
        return instance;
    }
}

// 2. 懒汉，线程安全
class LazySyncSingleton
{
    private static LazySyncSingleton instance = null;
    private LazySyncSingleton() {}
    public static synchronized LazySyncSingleton getInstance()
    {
        if (instance == null)
            instance = new LazySyncSingleton();
        return instance;
    }
    
    public static LazySyncSingleton getInstanceTest()       // self test
    {
        synchronized (instance)
        {
            if (instance == null)
                instance = new LazySyncSingleton();
        }
        return instance;
    }
}

// 3. 饿汉式
// 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法，
// 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance显然没有达到 lazy loading 的效果。
// java.lang.ClassLoader.loadClass(String)
class ImmediatelySingleton
{
    private static ImmediatelySingleton instance = new ImmediatelySingleton();
    private ImmediatelySingleton() {}
    public static ImmediatelySingleton getInstance()
    {
        return instance;
    }
}

// 4. 双检锁/双重校验锁（DCL，即 double-checked locking）
class DoubleCheckSingleton
{
    private static DoubleCheckSingleton instance = null;
    private DoubleCheckSingleton() {}
    public static DoubleCheckSingleton getInstance()
    {
        if (instance == null)
            synchronized (DoubleCheckSingleton.class)
            {
                if (instance == null)
                    instance = new DoubleCheckSingleton();
            }
        return instance;
    }
}


// 5. 登记式/静态内部类
// 同样利用了 classloader 机制来保证初始化 instance 时只有一个线程
// 它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），
// 而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类
class StaticSingleton
{
    private static class StaticSingletonHolder
    {
        private static final StaticSingleton instance = new StaticSingleton();
    }
    private StaticSingleton() {}
    public static StaticSingleton getInstance()
    {
        return StaticSingletonHolder.instance;
    }
}



// 6. 枚举
// 这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。
// 这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。
enum Singleton
{
    INSTANCE;       // 必须第一个。y？

    private Integer i = 1;
    
    // 方法
    public void Fun1()
    {
        System.out.println("enum Singleton " + i);
    }
}













public class D_BuilderPattern
{

//    主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；
//    由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
//    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。
    
    // 但是，给出的例子是 kfc点餐，和顺序无关啊。
    // 拆分到Item(名字(汉堡/可乐)，包装(盒装/瓶装)，价格)
    // Item 2个抽象子类，Burger，ColdDrink。汉堡必然盒装，可乐必然瓶装。价格是抽象方法
    // 实体类，VegBurger,ChickenBurger,Coke,Pepsi.
    // Meal类，里面一个List<Item>保存套餐。getCost(累加list元素的价格)，showItems(打印list的元素)。
    // MealBuilder，2个方法，prepareVegMeal,prepareNonVegMeal.分别组装并返回Meal
    
    
    // 只是把类的创建组成一个新的方法。就是套餐，套餐基本不会变的，所以就省去了每次都要手动 addItem的 步骤，直接获得一个 最终套餐。
    // 单点也行，毕竟 "将它们组合在一起的算法却相对稳定".. 只是addItem。。。不过这需要抽象到底层，不然没办法用一个范型List，虽然Object肯定能add，但是没有办法showItems，getCost。
    // 就是增加一层来简化对象的生成。主要是套餐是固定的，所以直接利用builder来获得套餐。而不必自己new，addItem。不过，固定的套餐，不如直接创建一个套餐类。
    
    
    // 看下面的笔记：Builder中的属性： Burger，ColdDrink，以及 各自的份数!!!
    // 有3个方法，2个方法接受 Burger+份数，ColdDrink+份数。 1个方法返回 订单。。这应该是builder真正的用处吧。
    
    // 不过更普遍的应该是Builder 就一个方法(static？), 这个方法接受(Burger，份数，ColdDrink，份数)，return 订单。
    // 笔记里的那种 需要每次new一个Builder。
    // 这样可以把 限制集中写在Builder中。比如 汉堡的数量必须大于可乐的数量。。。。这种限制就是算法啊。
    // 不过点餐有这种限制的话，可以直接在点餐界面的 可乐份数 限制最小值>=汉堡数量 吧。。
    
    
    
    
    // 月结的 明细。。用builder 用来初始化很多属性。
    // 不过原型模式也可以啊。
    // 两者都是创建型。所以就是 创建对象时，需要确定 选择哪种 创建模式。
    // 明细的话，应该是建造者模式，因为明细是 源数据 经过处理获得的，只能说：生成明细的算法是稳定的。但是属性的内容是和源数据密切相关的。
    // 原型模式的话，是借助于clone，如果 明细的大部分 属性都不会改变的话，用原型模式 更合适。
    // 但是 这里的明细 是要借助于 其他数据 来生成的。
    
    






public class E_PrototypePattern
{
    
    // 用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
    // 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
    
    
    // 主要是clone。说明 这个 类的对象，大部分属性都是不变的。。或者说这个类太大了，new的耗时长，所以用clone来缩短新建的时间。
    
    













public class F_AdapterPattern
{

//    适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。
//    意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
//    主要解决：主要解决在软件系统中，常常要将一些"现存的对象"放到新的环境中，而新环境要求的接口是现对象不能满足的。
//    何时使用： 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 
//    2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 
//    3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。） 
    
//    适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。
    
    
    // 就是 把一个接口A的实现 作为 另一个接口B的实现的 属性，这样，B的实现就能调用A的实现了，而且这种调用是在B原有的方法中调用，就是扩展了B的原有方法的功能。

//public class MediaAdapter implements MediaPlayer {
// 
//   AdvancedMediaPlayer advancedMusicPlayer;
// 
//   public MediaAdapter(String audioType){
//      if(audioType.equalsIgnoreCase("vlc") ){
//         advancedMusicPlayer = new VlcPlayer();       
//      } else if (audioType.equalsIgnoreCase("mp4")){
//         advancedMusicPlayer = new Mp4Player();
//      }  
//   }
// 
//   @Override
//   public void play(String audioType, String fileName) {
//      if(audioType.equalsIgnoreCase("vlc")){
//         advancedMusicPlayer.playVlc(fileName);
//      }else if(audioType.equalsIgnoreCase("mp4")){
//         advancedMusicPlayer.playMp4(fileName);
//      }
//   }
//}
    // 网上的例子里，这个适配器 实现了 接口B(被扩展方法功能的那个接口)。

    // 被扩展方法功能的 接口的 实现类。
//public class AudioPlayer implements MediaPlayer {
//   MediaAdapter mediaAdapter; 
// 
//   @Override
//   public void play(String audioType, String fileName) {    
// 
//      //播放 mp3 音乐文件的内置支持
//      if(audioType.equalsIgnoreCase("mp3")){
//         System.out.println("Playing mp3 file. Name: "+ fileName);         
//      } 
//      //mediaAdapter 提供了播放其他文件格式的支持
//      else if(audioType.equalsIgnoreCase("vlc") 
//         || audioType.equalsIgnoreCase("mp4")){
//         mediaAdapter = new MediaAdapter(audioType);
//         mediaAdapter.play(audioType, fileName);
//      }
//      else{
//         System.out.println("Invalid media. "+
//            audioType + " format not supported");
//      }
//   }   
//}

    // 是为了 扩展现有方法的功能。
    // 适配器是为了后续的扩展性，通用性。不然直接 AudioPlayer 里增加 AdvancedMediaPlayer 属性就可以了。
    // 有了适配器，后续如果要再添加一个 VideoPlayer，只要写到 适配器里就可以了，所有 需要扩展功能的方法都会自动扩展。
    // 不过 AudioPlayer 中的
//  //mediaAdapter 提供了播放其他文件格式的支持
//  else if(audioType.equalsIgnoreCase("vlc") 
//     || audioType.equalsIgnoreCase("mp4")){
    // 这段代码 不应该存在吧？应该放到 适配器中？，有这段代码的话，日后适配器 增加了VideoPlayer，依然需要修改 这段代码啊。
    // 不过不写这段代码的话，又新增一个适配器怎么办？虽然 2个适配器应该合并的。
    // 应该没什么问题的，最多2个适配器都调用，
    // 不过如果2个适配器都 支持 某种文件格式，那么会 执行2次，可以让适配器的方法返回boolean，代表这个适配器是否起作用。。。
    // 。。。合并适配器是最好的办法。。。等实际问题吧。
    
    // 适配器 通过 实现接口A 并将接口B 作为属性 来调用B的方法。 适配器作为类A的属性，扩展现有类A方法的功能。
    // 实现接口A 是否有必要？，为什么需要实现接口A？
    // 实现接口A，好像只有1个效果：以后接口A增加了方法声明，那么这个适配器也必须实现方法。。也有点道理，类A使用的适配器，就得保证接口A的方法都实现了。
    // 类A 就能 肯定：适配器的新增方法是可用的。(如果适配器没有方法的话，IDE会提示啊。可能是Notepad吧。。。)
    












public class G_BridgePattern
{

//    用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
//    这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。
    
//    意图：将抽象部分与实现部分分离，使它们都可以独立的变化。
//    主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。
    
//    使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。
//    2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
//    3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。 
    
    // ...看例子只是，将 画这个动作 抽取出来变成一个 新类。
    // 形状类 中有 画类的对象。形状的画动作直接调用 画类的方法。
    // 变化可能是指：形状的变化(圆，方，二维，三维，曲线)，画的变化(。。例子是颜色的不同，但是颜色应该是(不是，颜色不是形状的一个属性)。)
    // 组装
    // 分开的两个类，应该是可以独立存在的两个类，或者独立性很高。一个类可以作为另一个类的属性。
    // 比如：船，武器。两个独立类。小船+AK47=海盗船，大船+火炮=军舰。。
    // 船，武器，可以独立变化。两者在现实中的关系是松耦合，所以可以拆分，可以独立变化。
    // 终究云里雾里。
    
    // 只要一开始的时候抽象得好，基本不会碰到 需要桥接的时候吧。或者说一开始就已经是桥接模式了。
    // 就是，桥接模式只应该出现在 设计时。代码运行后，还需要桥接模式的话，说明当初抽象的有不足之处？
    
    // 还有一点：例子上，是一个抽象类作为 形状的父类。抽象类里已经保存了 画类 的对象。
    // Shape redCircle = new Circle(100,100, 10, new RedCircle());
    // Circle 是形状，RedCircle是 用红色的笔画。shape是抽象类，保存了 画类的接口。
    // Shape是抽象类 还是接口 好像对 桥接模式 无所谓。当然，对代码来说，把 画类属性 抽象到顶层 符合面向对象。
    
    











public class H_FilterPattern
{

//    这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。
//    这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。
    
    // 总觉得网上的例子有点怪，原来是我想成责任链模式了。总觉得Filter应该用链式来实现。。
    // 责任链 是 行为型模式。过滤器 是 结构型模式
    // 责任链 和 过滤器 都可以做 链式Filter。。。不不不。过滤器模式 是结合多个 标准来获得 单一标准。。单一标准！。也差不多。
    // 过滤器 主要是 标准的组合
    // 责任链 就是链式调用了啊。
    // 过滤器模式 更注重 标准的可重用; 责任链 更注重 标准的易修改，可变？
    
    // ca,责任链 不是这样用的。。
//    避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。
    // 链上的是 处理者。只有一个会处理。
    















组合模式
public class I_CompositePattern
{

    
//    意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
//    主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。
//    何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。
//    如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。
//    关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。
    
    // 例子的部分代码。
//    public class Employee {
//        private String name;
//        private String dept;
//        private int salary;
//        private List<Employee> subordinates;
    
//    Employee CEO = new Employee("John","CEO", 30000);
//    Employee headSales = new Employee("Robert","Head Sales", 20000);
//    Employee headMarketing = new Employee("Michael","Head Marketing", 20000);
//    Employee clerk1 = new Employee("Laura","Marketing", 10000);
//    Employee clerk2 = new Employee("Bob","Marketing", 10000);
//    Employee salesExecutive1 = new Employee("Richard","Sales", 10000);
//    Employee salesExecutive2 = new Employee("Rob","Sales", 10000);
//
//    CEO.add(headSales);
//    CEO.add(headMarketing);
//    headSales.add(salesExecutive1);
//    headSales.add(salesExecutive2);
//    headMarketing.add(clerk1);
//    headMarketing.add(clerk2);
//
//    //打印该组织的所有员工
//    System.out.println(CEO); 
//    for (Employee headEmployee : CEO.getSubordinates()) {
//       System.out.println(headEmployee);
//       for (Employee employee : headEmployee.getSubordinates()) {
//          System.out.println(employee);
//       }
//    }
    
    
    // 。。。这个我真没见过。。。。。真见过。。。
    
    
    // 网站上 其他人的笔记
//    1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），
//      我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。
//    2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，
//      而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。
    
    
    // 对象保存了它所属范围的全体对象。
    // 想错了，不是保存它所属范围的全体对象，而是保存它的下级。 树结构。保存的是子结点，不是同级。
    // 机构，人员，的上下级。
    
    










public class J_DecoratorPattern
{

//    装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。
//    这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。
//    这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。
//    意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。
//    主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。
    
    // 并在保持类方法签名完整性的前提下，提供了额外的功能。
    // 扩展类方法功能，而不是扩展类功能。
    


//public interface Shape {
//   void draw();
//}

//public class Circle implements Shape {
// 
//   @Override
//   public void draw() {
//      System.out.println("Shape: Circle");
//   }
//}

//public abstract class ShapeDecorator implements Shape {
//   protected Shape decoratedShape;
// 
//   public ShapeDecorator(Shape decoratedShape){
//      this.decoratedShape = decoratedShape;
//   }
// 
//   public void draw(){
//      decoratedShape.draw();
//   }  
//}

//public class RedShapeDecorator extends ShapeDecorator {
// 
//   public RedShapeDecorator(Shape decoratedShape) {
//      super(decoratedShape);     
//   }
// 
//   @Override
//   public void draw() {
//      decoratedShape.draw();         
//      setRedBorder(decoratedShape);
//   }
// 
//   private void setRedBorder(Shape decoratedShape){
//      System.out.println("Border Color: Red");
//   }
//}

    
//Shape redCircle = new RedShapeDecorator(new Circle());














public class K_FacadePattern
{
    
//    外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。
//    这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。
//    这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。
//    意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
//    主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。
    
    
    // 网上的例子，但是这种不如直接 工厂模式吧。也不是，工厂模式返回的是对象，如果对象有其他方法的话，会被用户调用。这种模式，用户就只能调用draw。
//public class ShapeMaker {
//   private Shape circle;
//   private Shape rectangle;
//   private Shape square;
// 
//   public ShapeMaker() {
//      circle = new Circle();
//      rectangle = new Rectangle();
//      square = new Square();
//   }
// 
//   public void drawCircle(){
//      circle.draw();
//   }
//   public void drawRectangle(){
//      rectangle.draw();
//   }
//   public void drawSquare(){
//      square.draw();
//   }
//}

    // 网上，其他人的笔记
//    感觉电脑的例子更形象：
//    电脑整机是 CPU、内存、硬盘的外观。有了外观以后，启动电脑和关闭电脑都简化了。
//    直接 new 一个电脑。
//    在 new 电脑的同时把 cpu、内存、硬盘都初始化好并且接好线。
//    对外暴露方法（启动电脑，关闭电脑）。
//    启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘
//    关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU
    
    // 这就是private方法啊。暴露的是public方法，但是public方法调用了其他的private方法。这种算是 外观模式吗？
    // 封装。
    
    
    // 突然觉得，这和 适配器模式 一样啊，都是封装自己的复杂，给用户一个简单接口。
    // 不，适配器是把 其他类 的功能加入到 本类中。不影响用户的接口。
    // 装饰器模式 是把自己的复杂封装，给用户一个新接口。
    // 装饰器就是封装吧。把复杂的步骤封装成一个方法，这样就可能直接调用方法完成原本复杂的逻辑了。
    
    // 不，外观模式要提供一个 ShapeMaker 这种客户端(?)来给 客户用。
    // 封装到另外一个(专门用来暴露接口的)类。
    // 是将方法封装，能直接执行。。工厂模式是返回对象，没办法直接执行。
    
    














public class L_FlyweightPattern
{

//    享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。
//    这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。
//    享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。
//    我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 Circle 对象。
    
//    意图：运用共享技术有效地支持大量细粒度的对象。
//    主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。
//    何时使用： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 
//              4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。
//    如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。
//    关键代码：用 HashMap 存储这些对象。
//    应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。 
//    使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。
//    注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。 
    
    
//    public class ShapeFactory {
//        private static final HashMap<String, Shape> circleMap = new HashMap<>();
//      
//        public static Shape getCircle(String color) {
//           Circle circle = (Circle)circleMap.get(color);
//      
//           if(circle == null) {
//              circle = new Circle(color);
//              circleMap.put(color, circle);
//              System.out.println("Creating circle of color : " + color);
//           }
//           return circle;
//        }
//     }
    
    
    // 工厂 + 单例 ？ 工厂下的单例。单例的工厂形式。
    // 单例是一个类一个对象。
    // 这里是一个类多个对象，每个类型一个对象。
    // 这里如果返回的时候是返回clone。。。
    













public class M_ProxyPattern
{

//    在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。
//    在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
//    意图：为其他对象提供一种代理以控制对这个对象的访问。
//    主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
//    何时使用：想在访问一个类时做一些控制。
//    如何解决：增加中间层。
//    关键代码：实现与被代理类组合。
//    注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。 
    
    
    // 网上的例子。...可以lazy加载
//public class ProxyImage implements Image{
// 
//   private RealImage realImage;
//   private String fileName;
// 
//   public ProxyImage(String fileName){
//      this.fileName = fileName;
//   }
// 
//   @Override
//   public void display() {
//      if(realImage == null){
//         realImage = new RealImage(fileName);
//      }
//      realImage.display();
//   }
//}
    
    
    // 网上的笔记提到了：
    // java.lang.reflect.InvocationHandler
    // java.lang.reflect.Proxy......static方法.newProxyInstance。
//    //真实对象
//    Subject realSubject =  new RealSubject();
//    MyInvocationHandler myInvocationHandler = new MyInvocationHandler(realSubject);
//    //代理对象
//    Subject proxyClass = (Subject) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]{Subject.class}, myInvocationHandler);
    
    















public class N_ChainOfResponsibilityPattern
{

//    责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。
//    在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。
//    意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。
//    主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。
//    何时使用：在处理消息的时候以过滤很多道。
//    如何解决：拦截的类都实现统一接口。
//    关键代码：Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。
    
    
    // 例子是一个 Log的例子，根据debug等级来输出。3个输出器分别输出<=debug，<=info，<=error级别的，组成一个责任链。然后log来了以后就给这个链。
//public abstract class AbstractLogger {
//   public static int INFO = 1;
//   public static int DEBUG = 2;
//   public static int ERROR = 3;
// 
//   protected int level;
// 
//   //责任链中的下一个元素
//   protected AbstractLogger nextLogger;
// 
//   public void setNextLogger(AbstractLogger nextLogger){
//      this.nextLogger = nextLogger;
//   }
// 
//   public void logMessage(int level, String message){
//      if(this.level <= level){
//         write(message);
//      }
//      if(nextLogger !=null){
//         nextLogger.logMessage(level, message);
//      }
//   }
// 
//   abstract protected void write(String message);
//   
//}















public class O_CommandPattern
{

//    命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。
//    意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。
//    主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。
//    何时使用：在某些场合，比如要对行为进行"记录、撤销/重做、事务"等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将"行为请求者"与"行为实现者"解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。
//    如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。
//    关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口
    
    // 原来是 命令发出者->命令执行者。现在是 命令发出者->中间层->命令执行者。。不是。
    
//    我们首先创建作为命令的接口 Order，然后创建作为请求的 Stock 类。实体命令类 BuyStock 和 SellStock，实现了 Order 接口，将执行实际的命令处理。创建作为调用对象的类 Broker，它接受订单并能下订单。
//    Broker 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。CommandPatternDemo，我们的演示类使用 Broker 类来演示命令模式。
    
    // 例子是 命令.执行。。。并不是 命令执行者执行命令。
    // 命令是一个接口，只有 执行 这个方法。
    // 把 执行这个动作 和被执行的对象 包装 成一个命令。。。。主要是这个，动作和对象 封装成一个命令，那么执行者 就不必知道 命令究竟是怎么实现的，只要 命令.执行。
    // 执行的时候 只要 命令.执行 就可以了。
    // 以后新增功能，只要新增一个 命令 就可以了。不必修改 执行者，发送者。
    
    // 配合buffer，会很不错吧？ buffer里不必保存 动作和对象和执行者。

    
    
//public class SellStock implements Order {
//   private Stock abcStock;
// 
//   public SellStock(Stock abcStock){
//      this.abcStock = abcStock;
//   }
// 
//   public void execute() {
//      abcStock.sell();
//   }
//}

//    public class Broker {
//        private List<Order> orderList = new ArrayList<Order>(); 
//      
//        public void takeOrder(Order order){
//           orderList.add(order);      
//        }
//      
//        public void placeOrders(){
//           for (Order order : orderList) {
//              order.execute();
//           }
//           orderList.clear();
//        }
//     }
    
//public class CommandPatternDemo {
//   public static void main(String[] args) {
//      Stock abcStock = new Stock();
// 
//      BuyStock buyStockOrder = new BuyStock(abcStock);
//      SellStock sellStockOrder = new SellStock(abcStock);
// 
//      Broker broker = new Broker();
//      broker.takeOrder(buyStockOrder);
//      broker.takeOrder(sellStockOrder);
// 
//      broker.placeOrders();
//   }
//}















public class P_InterpreterPattern
{

//    解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。 
//    意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
//    主要解决：对于一些固定文法构建一个解释句子的解释器。
//    何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。
//    如何解决：构件语法树，定义终结符与非终结符。
//    关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。
//    应用实例：编译器、运算表达式计算。
//    优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。
//    缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。
//    使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。
//    注意事项：可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。
    


//public interface Expression {
//   public boolean interpret(String context);
//}
    
//public class TerminalExpression implements Expression {
//   
//   private String data;
// 
//   public TerminalExpression(String data){
//      this.data = data; 
//   }
// 
//   @Override
//   public boolean interpret(String context) {
//      if(context.contains(data)){
//         return true;
//      }
//      return false;
//   }
//}
    
//public class OrExpression implements Expression {
//    
//   private Expression expr1 = null;
//   private Expression expr2 = null;
// 
//   public OrExpression(Expression expr1, Expression expr2) { 
//      this.expr1 = expr1;
//      this.expr2 = expr2;
//   }
// 
//   @Override
//   public boolean interpret(String context) {      
//      return expr1.interpret(context) || expr2.interpret(context);
//   }
//}
    
//public class InterpreterPatternDemo {
// 
//   //规则：Robert 和 John 是男性
//   public static Expression getMaleExpression(){
//      Expression robert = new TerminalExpression("Robert");
//      Expression john = new TerminalExpression("John");
//      return new OrExpression(robert, john);    
//   }
// 
//   //规则：Julie 是一个已婚的女性
//   public static Expression getMarriedWomanExpression(){
//      Expression julie = new TerminalExpression("Julie");
//      Expression married = new TerminalExpression("Married");
//      return new AndExpression(julie, married);    
//   }
//    
//   public static void main(String[] args) {
//      Expression isMale = getMaleExpression();
//      Expression isMarriedWoman = getMarriedWomanExpression();
// 
//      System.out.println("John is male? " + isMale.interpret("John"));
//      System.out.println("Julie is a married women? " 
//      + isMarriedWoman.interpret("Married Julie"));
//   }
//}


















public class Q_IteratorPattern
{

//    这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。
//    意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。
//    主要解决：不同的方式来遍历整个整合对象。
//    何时使用：遍历一个聚合对象。
//    如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。
//    关键代码：定义接口：hasNext, next。
    
    

//public interface Iterator {
//   public boolean hasNext();
//   public Object next();
//}

//public interface Container {
//   public Iterator getIterator();
//}


//public class NameRepository implements Container {
//   public String names[] = {"Robert" , "John" ,"Julie" , "Lora"};
// 
//   @Override
//   public Iterator getIterator() {
//      return new NameIterator();
//   }
// 
//   private class NameIterator implements Iterator {
// 
//      int index;
// 
//      @Override
//      public boolean hasNext() {
//         if(index < names.length){
//            return true;
//         }
//         return false;
//      }
// 
//      @Override
//      public Object next() {
//         if(this.hasNext()){
//            return names[index++];
//         }
//         return null;
//      }     
//   }
//}

    
    // 内部类。
    // java.util.Iterator 的方法 访问控制符 都是 default。所以子类 或 同包的能访问..nonono
    // Iterator 是接口...默认 public abstract...
    // 继承 重写父类方法时， 能扩大或不变 访问域，不能缩小，父类能被访问的方法，子类必须能被访问。
    // 声明的抛出异常 要子类或相同，父类外面的try catch 必须能 catch 子类的异常。
    
    
    private class MyIterator2<E> implements Iterator<E>
    {

        @Override
        public boolean hasNext()
        {
            // TODO Auto-generated method stub
            return false;
        }

        @Override
        public E next()
        {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public void remove()
        {
            // TODO Auto-generated method stub
            Iterator.super.remove();
        }
        
    }
    
    private class MyIterator implements Iterator
    {

        @Override
        public boolean hasNext()
        {
            // TODO Auto-generated method stub
            return false;
        }

        @Override
        public Object next()
        {
            // TODO Auto-generated method stub
            return null;
        }
        
    }
    











中介者模式
public class R_MediatorPattern
{
    
//    用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。
//    意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
//    主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。
//    何时使用：多个类相互耦合，形成了网状结构。
//    如何解决：将上述网状结构分离为星型结构。
//    关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。
    
    // a.fun(b); -> CLZ.static_fun(a, b);
    
    // 觉得这个例子没用啊。也不是，这个功能应该是 如果 部分User的sendMessage 需要变化的时候，就有用了。
    // 只要改 ChatRoom：里面进行分类。。。也不是啊。直接在sendMessage 分类也可以啊。
    // 大量的关联关系。。想不出。。。
    // 除非 把动作 发给 showMessage，然后showMessage 根据动作 来调用方法。这样可以把 多个fun 合并成一个。但是没有必要啊。不同的fun 合并成一个，有什么意义？
    // 不合并fun的话，每个fun多一层简单的隔离没有任何意义啊。就像这个例子，只是多了一层ChatRoom的showMessage，这个没有必要啊。
    
    // 也不是。中介者有各种各样的。。。差别是中介者。
    // 中介者可以定向 消息的目的地，是println，还是log，数据库等。
    // NO，中介应该不是这么用的吧。而且这个例子没有办法注入中介。。上面的功能应该是另外一种模式吧？
    
    
    // 对象与对象之间存在大量的关联关系，多个类相互耦合，形成了网状结构。想不出例子。
    
    
    
//    public class ChatRoom {
//        public static void showMessage(User user, String message){
//           System.out.println(new Date().toString()
//              + " [" + user.getName() +"] : " + message);
//        }
//     }
//    
//
//public class User {
//   private String name;
// 
//   public String getName() {
//      return name;
//   }
// 
//   public void setName(String name) {
//      this.name = name;
//   }
// 
//   public User(String name){
//      this.name  = name;
//   }
// 
//   public void sendMessage(String message){
//      ChatRoom.showMessage(this, message);
//   }
//}

    











public class Y_VisitorPattern
{

    
//    在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。
//    这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。
    
//    意图：主要将数据结构与数据操作分离。
//
//    主要解决：稳定的数据结构和易变的操作耦合问题。
//
//    何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，使用访问者模式将这些封装到类中。
//
//    如何解决：在被访问的类里面加一个对外提供接待访问者的接口。
//
//    关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。
    
    
    
    
    

//public class Mouse  implements ComputerPart {
// 
//   @Override
//   public void accept(ComputerPartVisitor computerPartVisitor) {
//      computerPartVisitor.visit(this);
//   }
//}
    

//public class Computer implements ComputerPart {
//   
//   ComputerPart[] parts;
// 
//   public Computer(){
//      parts = new ComputerPart[] {new Mouse(), new Keyboard(), new Monitor()};      
//   } 
// 
// 
//   @Override
//   public void accept(ComputerPartVisitor computerPartVisitor) {
//      for (int i = 0; i < parts.length; i++) {
//         parts[i].accept(computerPartVisitor);
//      }
//      computerPartVisitor.visit(this);
//   }
//}


//public class ComputerPartDisplayVisitor implements ComputerPartVisitor {
// 
//   @Override
//   public void visit(Computer computer) {
//      System.out.println("Displaying Computer.");
//   }
// 
//   @Override
//   public void visit(Mouse mouse) {
//      System.out.println("Displaying Mouse.");
//   }
// 
//   @Override
//   public void visit(Keyboard keyboard) {
//      System.out.println("Displaying Keyboard.");
//   }
// 
//   @Override
//   public void visit(Monitor monitor) {
//      System.out.println("Displaying Monitor.");
//   }
//}
 
    
    
    
    














public class X_TemplatePattern
{

//    在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。
    
    
//    意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
//
//    主要解决：一些方法通用，却在每一个子类都重新写了这一方法。
//
//    何时使用：有一些通用的方法。
//
//    如何解决：将这些通用算法抽象出来。
//
//    关键代码：在抽象类实现，其他步骤在子类实现。
//
//    应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 
//              3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。 
    
    

//public abstract class Game {
//   abstract void initialize();
//   abstract void startPlay();
//   abstract void endPlay();
// 
//   //模板
//   public final void play(){
// 
//      //初始化游戏
//      initialize();
// 
//      //开始游戏
//      startPlay();
// 
//      //结束游戏
//      endPlay();
//   }
//}

//    public class Cricket extends Game {
    
//    public class Football extends Game {
    
    
















public class W_StrategyPattern
{

//    在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
//
//    在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。
    
//    意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。
//
//    主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。
//
//    何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。
//
//    如何解决：将这些算法封装成一个一个的类，任意地替换。
//
//    关键代码：实现同一个接口。
    
    


















public class V_NullObjectPattern
{
    
//    在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。
//
//    在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。
    

    















public class U_StatePattern
{

//    在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。
//
//    在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。
    
//    意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。
//    主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。
//    何时使用：代码中包含大量与对象状态有关的条件语句。
//    如何解决：将各种具体的状态类抽象出来。
//    关键代码：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。
//             而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。
//             实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。
//    应用实例： 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，'钟是抽象接口','钟A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。
    
    
    
    // 操作 与 被操作类 分离。
    // 操作 根据 状态 分类。 行为依赖于状态
    
    
    


















public class T_ObserverPattern
{

//    当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。
    
//    关键代码：在抽象类里有一个 ArrayList 存放观察者们。
    
//    注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。 
    
    











备忘录模式
public class S_MementoPattern
{

//    保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。
//    意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。
//    主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。
//    何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有"后悔药"可吃。
//    如何解决：通过一个备忘录类专门存储对象状态。
//    关键代码：客户不与备忘录类耦合，与备忘录管理类耦合。
    
    // clone ?
    // 
    














